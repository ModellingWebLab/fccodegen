//===========================================================================
// This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//
// Model: aslanidi_model_2009
//
// Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//     (translator: chaste_codegen, model type: RushLarsenLabview)
// on (date omitted as unimportant)
//
// <autogenerated>
//===========================================================================

//---------------------------------------------------------------------------
// Setup & input
//---------------------------------------------------------------------------

float64 Ynew[30];
float64 dY[30];
float64 Vmem;
float64 time;

//---------------------------------------------------------------------------
// State Variables
//---------------------------------------------------------------------------

// 0: V (millivolt) (in membrane)
// 1: m (dimensionless) (in sodium_current_m_gate)
// 2: h1 (dimensionless) (in sodium_current_h1_gate)
// 3: h2 (dimensionless) (in sodium_current_h2_gate)
// 4: d_L (dimensionless) (in L_type_Ca_channel_d_L_gate)
// 5: f_L (dimensionless) (in L_type_Ca_channel_f_L_gate)
// 6: d_T (dimensionless) (in T_type_Ca_channel_d_T_gate)
// 7: f_T (dimensionless) (in T_type_Ca_channel_f_T_gate)
// 8: r (dimensionless) (in Ca_independent_transient_outward_K_current_r_gate)
// 9: s1 (dimensionless) (in Ca_independent_transient_outward_K_current_s1_gate)
// 10: s2 (dimensionless) (in Ca_independent_transient_outward_K_current_s2_gate)
// 11: s3 (dimensionless) (in Ca_independent_transient_outward_K_current_s3_gate)
// 12: z (dimensionless) (in delayed_rectifier_K_current_z_gate)
// 13: p_a (dimensionless) (in delayed_rectifier_K_current_pa_gate)
// 14: p_i (dimensionless) (in delayed_rectifier_K_current_pi_gate)
// 15: Na_i (millimolar) (in intracellular_ion_concentrations)
// 16: Ca_i (millimolar) (in intracellular_ion_concentrations)
// 17: K_i (millimolar) (in intracellular_ion_concentrations)
// 18: O_C (dimensionless) (in intracellular_Ca_buffering)
// 19: O_TC (dimensionless) (in intracellular_Ca_buffering)
// 20: O_TMgC (dimensionless) (in intracellular_Ca_buffering)
// 21: O_TMgMg (dimensionless) (in intracellular_Ca_buffering)
// 22: K_c (millimolar) (in cleft_space_ion_concentrations)
// 23: Ca_rel (millimolar) (in Ca_handling_by_the_SR)
// 24: Ca_up (millimolar) (in Ca_handling_by_the_SR)
// 25: O_Calse (dimensionless) (in Ca_handling_by_the_SR)
// 26: F1 (dimensionless) (in Ca_handling_by_the_SR)
// 27: F2 (dimensionless) (in Ca_handling_by_the_SR)
// 28: F3 (dimensionless) (in Ca_handling_by_the_SR)
// 29: environment__time (millisecond)

//---------------------------------------------------------------------------
// Constants
//---------------------------------------------------------------------------

float64 A0_bck = 1.0278; // dimensionless (in A0_bc)
float64 Ampl_gain = 1.0; // dimensionless (in Ampl_gai)
float64 Cext = 1.0; // picoF (in Cex)
float64 E_l = 1.0; // millivolt (in E_)
float64 I = 1.0; // dimensionless (in )
float64 R_seal = 1.0; // ohm (in R_sea)
float64 Scale_bck = 1.0; // dimensionless (in Scale_bc)
float64 Scaling = 1.0; // dimensionless (in Scalin)
float64 k_bck = 0.098599999999999993; // one_over_millivolt (in k_bc)
float64 leak_comp_perc = 1.0; // dimensionless (in leak_comp_per)
float64 Cm = 5.0000000000000002e-5; // nanoF (in membrane)
float64 stim_amplitude = -20.0; // picoA (in membrane)
float64 stim_duration = 0.00020000000000000001; // second (in membrane)
float64 stim_start = 0.01; // second (in membrane)
float64 stim_period = 0.5; // second (in membrane)

float64 I_up_max = 2.7999999999999998; // picoA (in Ca_handling_by_the_SR)
float64 Vol_rel = 4.3999999999999997e-8; // nanolitre (in Ca_handling_by_the_SR)
float64 Vol_up = 3.9690000000000001e-7; // nanolitre (in Ca_handling_by_the_SR)
float64 alpha_rel = 200.0; // picoA_per_millimolar (in Ca_handling_by_the_SR)
float64 k_F3 = 0.81499999999999995; // per_second (in Ca_handling_by_the_SR)
float64 k_cyca = 0.00029999999999999997; // millimolar (in Ca_handling_by_the_SR)
float64 k_rel = 0.00029999999999999997; // millimolar (in Ca_handling_by_the_SR)
float64 k_srca = 0.5; // millimolar (in Ca_handling_by_the_SR)
float64 k_xcs = 0.40000000000000002; // dimensionless (in Ca_handling_by_the_SR)
float64 tau_tr = 0.01; // second (in Ca_handling_by_the_SR)
float64 g_to = 0.050001999999999998; // nanoS (in Ca_independent_transient_outward_K_current)
float64 E_Ca_app = 50.0; // millivolt (in L_type_Ca_channel)
float64 g_Ca_L = 0.0040000000000000001; // nanoS (in L_type_Ca_channel)
float64 d_NaCa = 0.00029999999999999997; // per_millimolar_4 (in Na_Ca_ion_exchanger_current)
float64 gamma = 0.45000000000000001; // dimensionless (in Na_Ca_ion_exchanger_current)
float64 k_NaCa = 2.0000000000000002e-5; // picoA_per_millimolar_4 (in Na_Ca_ion_exchanger_current)
float64 E_Ca_T = 38.0; // millivolt (in T_type_Ca_channel)
float64 g_Ca_T = 0.0060000000000000001; // nanoS (in T_type_Ca_channel)
float64 g_B_Ca = 3.1000000000000001e-5; // nanoS (in background_currents)
float64 g_B_Na = 6.3999999999999997e-5; // nanoS (in background_currents)
float64 Ca_c = 2.5; // millimolar (in cleft_space_ion_concentrations)
float64 Na_c = 140.0; // millimolar (in cleft_space_ion_concentrations)
float64 Vol_c = 2.5000000000000002e-6; // nanolitre (in cleft_space_ion_concentrations)
float64 g_Kr = 0.0035000000000000001; // nanoS (in delayed_rectifier_K_current)
float64 g_Ks = 0.0025000000000000001; // nanoS (in delayed_rectifier_K_current)
float64 CT = 1.0; // dimensionless (in environment)
float64 Mg_i = 2.5; // millimolar (in intracellular_Ca_buffering)
float64 Vol_Ca = 5.8839999999999999e-6; // nanolitre (in intracellular_ion_concentrations)
float64 Vol_i = 1.26e-5; // nanolitre (in intracellular_ion_concentrations)
float64 KmK1 = 0.58999999999999997; // millimolar (in inward_rectifier)
float64 g_K1 = 0.0050800000000000003; // nanoS (in inward_rectifier)
float64 shiftK1 = -3.6000000000000001; // millivolt (in inward_rectifier)
float64 steepK1 = 1.393; // dimensionless (in inward_rectifier)
float64 F = 96487.0; // coulomb_per_mole (in membrane)
float64 R = 8314.0; // millijoule_per_mole_kelvin (in membrane)
float64 T = 308.0; // kelvin (in membrane)
float64 stim_end = 100.0; // second (in membrane)
float64 i_CaP_max = 0.0095090000000000001; // picoA (in sarcolemmal_calcium_pump_current)
float64 k_CaP = 0.00020000000000000001; // millimolar (in sarcolemmal_calcium_pump_current)
float64 i_NaK_max = 0.064409999999999995; // picoA (in sodium_potassium_pump)
float64 k_NaK_K = 1.0; // millimolar (in sodium_potassium_pump)
float64 k_NaK_Na = 11.0; // millimolar (in sodium_potassium_pump)

//------------------------------------------------------------------------------
// Computed variables
//------------------------------------------------------------------------------

float64 O_Calse_orig_deriv; // 1 / second (in Ca_handling_by_the_SR)
float64 I_ext; // dimensionless (in I_ex)
float64 PM; // dimensionless (in environment)
float64 time; // second (in environment)
float64 g_leak; // one_over_ohm (in g_lea)
float64 O_TMgMg_orig_deriv; // 1 / second (in intracellular_Ca_buffering)
float64 i_rel; // picoA (in Ca_handling_by_the_SR)
float64 i_up; // picoA (in Ca_handling_by_the_SR)
float64 r_inact; // per_second (in Ca_handling_by_the_SR)
float64 F3_orig_deriv; // 1 / second (in Ca_handling_by_the_SR)
float64 dOCdt; // per_second (in intracellular_Ca_buffering)
float64 O_C_orig_deriv; // 1 / second (in intracellular_Ca_buffering)
float64 dOTCdt; // per_second (in intracellular_Ca_buffering)
float64 O_TC_orig_deriv; // 1 / second (in intracellular_Ca_buffering)
float64 dOTMgCdt; // per_second (in intracellular_Ca_buffering)
float64 O_TMgC_orig_deriv; // 1 / second (in intracellular_Ca_buffering)
float64 i_tr; // picoA (in Ca_handling_by_the_SR)
float64 Ca_rel_orig_deriv; // millimolar / second (in Ca_handling_by_the_SR)
float64 Ca_up_orig_deriv; // millimolar / second (in Ca_handling_by_the_SR)
float64 E_K; // millivolt (in Ca_independent_transient_outward_K_current)
float64 E_Ca; // millivolt (in background_currents)
float64 r_act; // per_second (in Ca_handling_by_the_SR)
float64 F1_orig_deriv; // 1 / second (in Ca_handling_by_the_SR)
float64 F2_orig_deriv; // 1 / second (in Ca_handling_by_the_SR)
float64 i_sus; // picoA (in Ca_independent_transient_outward_K_current)
float64 i_to; // picoA (in Ca_independent_transient_outward_K_current)
float64 alpha_r; // per_second (in Ca_independent_transient_outward_K_current_r_gate)
float64 beta_r; // per_second (in Ca_independent_transient_outward_K_current_r_gate)
float64 r_infinity; // dimensionless (in Ca_independent_transient_outward_K_current_r_gate)
float64 tau_r; // second (in Ca_independent_transient_outward_K_current_r_gate)
float64 s1_infinity; // dimensionless (in Ca_independent_transient_outward_K_current_s1_gate)
float64 tau_s1; // second (in Ca_independent_transient_outward_K_current_s1_gate)
float64 s2_infinity; // dimensionless (in Ca_independent_transient_outward_K_current_s2_gate)
float64 tau_s2; // second (in Ca_independent_transient_outward_K_current_s2_gate)
float64 s3_infinity; // dimensionless (in Ca_independent_transient_outward_K_current_s3_gate)
float64 tau_s3; // second (in Ca_independent_transient_outward_K_current_s3_gate)
float64 d_prime; // dimensionless (in L_type_Ca_channel)
float64 i_Ca_L; // picoA (in L_type_Ca_channel)
float64 E10; // millivolt (in L_type_Ca_channel_d_L_gate)
float64 alpha_d_L_PW_0; // per_second (in L_type_Ca_channel_d_L_gate)
float64 alpha_d_L_PW_1; // per_second (in L_type_Ca_channel_d_L_gate)
float64 alpha_d_L; // per_second (in L_type_Ca_channel_d_L_gate)
float64 beta_d_L; // per_second (in L_type_Ca_channel_d_L_gate)
float64 d_L_infinity; // dimensionless (in L_type_Ca_channel_d_L_gate)
float64 tau_d_L; // second (in L_type_Ca_channel_d_L_gate)
float64 E0_f_L; // millivolt (in L_type_Ca_channel_f_L_gate)
float64 alpha_f_L; // per_second (in L_type_Ca_channel_f_L_gate)
float64 beta_f_L; // per_second (in L_type_Ca_channel_f_L_gate)
float64 f_L_infinity; // dimensionless (in L_type_Ca_channel_f_L_gate)
float64 tau_f_L; // second (in L_type_Ca_channel_f_L_gate)
float64 i_NaCa; // picoA (in Na_Ca_ion_exchanger_current)
float64 i_Ca_T; // picoA (in T_type_Ca_channel)
float64 E0_d_T; // millivolt (in T_type_Ca_channel_d_T_gate)
float64 alpha_d_T; // per_second (in T_type_Ca_channel_d_T_gate)
float64 beta_d_T; // per_second (in T_type_Ca_channel_d_T_gate)
float64 d_T_infinity; // dimensionless (in T_type_Ca_channel_d_T_gate)
float64 tau_d_T; // second (in T_type_Ca_channel_d_T_gate)
float64 E0_f_T; // millivolt (in T_type_Ca_channel_f_T_gate)
float64 alpha_f_T; // per_second (in T_type_Ca_channel_f_T_gate)
float64 beta_f_T; // per_second (in T_type_Ca_channel_f_T_gate)
float64 f_T_infinity; // dimensionless (in T_type_Ca_channel_f_T_gate)
float64 tau_f_T; // second (in T_type_Ca_channel_f_T_gate)
float64 i_B_Ca; // picoA (in background_currents)
float64 i_Kr; // picoA (in delayed_rectifier_K_current)
float64 i_Ks; // picoA (in delayed_rectifier_K_current)
float64 alpha_p_a; // per_second (in delayed_rectifier_K_current_pa_gate)
float64 beta_p_a; // per_second (in delayed_rectifier_K_current_pa_gate)
float64 p_a_infinity; // dimensionless (in delayed_rectifier_K_current_pa_gate)
float64 tau_p_a; // second (in delayed_rectifier_K_current_pa_gate)
float64 alpha_p_i; // per_second (in delayed_rectifier_K_current_pi_gate)
float64 beta_p_i; // per_second (in delayed_rectifier_K_current_pi_gate)
float64 p_i_infinity; // dimensionless (in delayed_rectifier_K_current_pi_gate)
float64 tau_p_i; // second (in delayed_rectifier_K_current_pi_gate)
float64 alpha_z; // per_second (in delayed_rectifier_K_current_z_gate)
float64 beta_z; // per_second (in delayed_rectifier_K_current_z_gate)
float64 tau_z; // second (in delayed_rectifier_K_current_z_gate)
float64 z_infinity; // dimensionless (in delayed_rectifier_K_current_z_gate)
float64 i_bck; // dimensionless (in i_bc)
float64 i_leak_comp; // dimensionless (in i_leak_com)
float64 i_inj; // dimensionless (in i_in)
float64 i_K1; // picoA (in inward_rectifier)
float64 i_Stim; // picoA (in membrane)
float64 i_CaP; // picoA (in sarcolemmal_calcium_pump_current)
float64 Ca_i_orig_deriv; // millimolar / second (in intracellular_ion_concentrations)
float64 E_Na; // millivolt (in sodium_current)
float64 i_B_Na; // picoA (in background_currents)
float64 alpha_h; // per_second (in sodium_current_h1_gate)
float64 beta_h; // per_second (in sodium_current_h1_gate)
float64 h_infinity; // dimensionless (in sodium_current_h1_gate)
float64 tau_h1; // second (in sodium_current_h1_gate)
float64 tau_h2; // second (in sodium_current_h2_gate)
float64 E0_m; // millivolt (in sodium_current_m_gate)
float64 alpha_m; // per_second (in sodium_current_m_gate)
float64 beta_m; // per_second (in sodium_current_m_gate)
float64 i_Na; // picoA (in sodium_current)
float64 i_p; // picoA (in sodium_potassium_pump)
float64 K_c_orig_deriv; // millimolar / second (in cleft_space_ion_concentrations)
float64 K_i_orig_deriv; // millimolar / second (in intracellular_ion_concentrations)
float64 Na_i_orig_deriv; // millimolar / second (in intracellular_ion_concentrations)
float64 V_orig_deriv; // millivolt / second (in membrane)


//---------------------------------------------------------------------------
// Computation
//---------------------------------------------------------------------------

O_Calse_orig_deriv = -400.0 * Y[25] + 480.0 * (1.0 - Y[25]) * Y[23]; // 1 / second
dY[25] = 0.001 * O_Calse_orig_deriv; // 1 / millisecond
I_ext = I / (Ampl_gain * Cext); // dimensionless
PM = 0; // dimensionless
time = 0.001 * Y[29]; // second
g_leak = 1 / R_seal; // one_over_ohm
O_TMgMg_orig_deriv = -666.0 * Y[21] + 2000.0 * (1.0 - Y[20] - Y[21]) * Mg_i; // 1 / second
dY[21] = 0.001 * O_TMgMg_orig_deriv; // 1 / millisecond
i_rel = pow(Y[27], 2) * (-Y[16] + Y[23]) * alpha_rel / pow((0.25 + Y[27]), 2); // picoA
i_up = (Y[16] / k_cyca - pow(k_xcs, 2) * Y[24] / k_srca) * I_up_max / ((k_cyca + Y[16]) / k_cyca + (k_srca + Y[24]) * k_xcs / k_srca); // picoA
r_inact = 33.960000000000001 + 339.60000000000002 * pow(Y[16], 4) / pow((k_rel + Y[16]), 4); // per_second
F3_orig_deriv = r_inact * Y[27] - k_F3 * Y[28]; // 1 / second
dY[28] = 0.001 * F3_orig_deriv; // 1 / millisecond
dOCdt = -476.0 * Y[18] + 200000.0 * (1.0 - Y[18]) * Y[16]; // per_second
O_C_orig_deriv = dOCdt; // 1 / second
dY[18] = 0.001 * O_C_orig_deriv; // 1 / millisecond
dOTCdt = -392.0 * Y[19] + 78400.0 * (1.0 - Y[19]) * Y[16]; // per_second
O_TC_orig_deriv = dOTCdt; // 1 / second
dY[19] = 0.001 * O_TC_orig_deriv; // 1 / millisecond
dOTMgCdt = -6.5999999999999996 * Y[20] + 200000.0 * (1.0 - Y[20] - Y[21]) * Y[16]; // per_second
O_TMgC_orig_deriv = dOTMgCdt; // 1 / second
dY[20] = 0.001 * O_TMgC_orig_deriv; // 1 / millisecond
i_tr = 2.0 * (-Y[23] + Y[24]) * Vol_rel * F / tau_tr; // picoA
Ca_rel_orig_deriv = -31.0 * O_Calse_orig_deriv + 0.5 * (-i_rel + i_tr) / (Vol_rel * F); // millimolar / second
Ca_up_orig_deriv = 0.5 * (-i_tr + i_up) / (Vol_up * F); // millimolar / second
dY[23] = 0.001 * Ca_rel_orig_deriv; // millimolar / millisecond
dY[24] = 0.001 * Ca_up_orig_deriv; // millimolar / millisecond
E_K = R * T * log(Y[22] / Y[17]) / F; // millivolt
E_Ca = 0.5 * R * T * log(Ca_c / Y[16]) / F; // millivolt
r_act = 240.0 * exp(-1.6000000000000001 + 0.080000000000000002 * Y[0]) + 203.80000000000001 * pow(Y[16], 4) / pow((k_rel + Y[16]), 4); // per_second
F1_orig_deriv = k_F3 * Y[28] - r_act * Y[26]; // 1 / second
F2_orig_deriv = r_act * Y[26] - r_inact * Y[27]; // 1 / second
if ((CT == 1.0) && (PM == 0))
i_sus = 0.098000000000000004 + 0.0014 * Y[0]
else if ((CT == 0) && (PM == 1.0))
i_sus = 0.16799999999999998 + 0.0023999999999999998 * Y[0]
else 
i_sus = 0.070000000000000007 + 0.001 * Y[0]

if ((CT == 1.0) && (PM == 0))
i_to = 0.20000000000000001 * (0.40000000000000002 + 0.59999999999999998 * pow(Y[11], 6)) * (-E_K + Y[0]) * (0.58999999999999997 * pow(Y[9], 3) + 0.40999999999999998 * pow(Y[10], 3)) * g_to * Y[8]
else if ((CT == 0) && (PM == 1.0))
i_to = 0.34999999999999998 * (0.40000000000000002 + 0.59999999999999998 * pow(Y[11], 6)) * (-E_K + Y[0]) * (0.58999999999999997 * pow(Y[9], 3) + 0.40999999999999998 * pow(Y[10], 3)) * g_to * Y[8]
else 
i_to = (0.40000000000000002 + 0.59999999999999998 * pow(Y[11], 6)) * (-E_K + Y[0]) * (0.58999999999999997 * pow(Y[9], 3) + 0.40999999999999998 * pow(Y[10], 3)) * g_to * Y[8]

alpha_r = 386.60000000000002 * exp(0.083333333333333329 * Y[0]); // per_second
beta_r = 8.0109999999999992 * exp(-0.1388888888888889 * Y[0]); // per_second
r_infinity = 1 / (1.0 + exp(-2.6628794603230959 - 0.17752529735487307 * Y[0])); // dimensionless
tau_r = 0.00040000000000000002 + 1 / (alpha_r + beta_r); // second
s1_infinity = 1 / (1.0 + exp(4.0070821529745047 + 0.14164305949008499 * Y[0])); // dimensionless
tau_s1 = 0.020400000000000001 + 0.54659999999999997 / (1.0 + exp(327.99999999999994 + 10.0 * Y[0])); // second
s2_infinity = 1 / (1.0 + exp(4.0070821529745047 + 0.14164305949008499 * Y[0])); // dimensionless
tau_s2 = 5.75 / (1.0 + exp(327.99999999999994 + 10.0 * Y[0])) + 0.45000000000000001 / (1.0 + exp(0.96921975662133131 - 0.071581961345740866 * Y[0])); // second
s3_infinity = 0.39975990396158467 + 0.60024009603841544 / (1.0 + exp(1.8506208911614319 + 0.036523009495982472 * Y[0])); // dimensionless
tau_s3 = 0.5 + 7.5 / (1.0 + exp(46.0 + 2.0 * Y[0])); // second
dY[26] = 0.001 * F1_orig_deriv; // 1 / millisecond
dY[27] = 0.001 * F2_orig_deriv; // 1 / millisecond
d_prime = 1 / (1.0 + exp(1.9166666666666667 - 0.083333333333333329 * Y[0])); // dimensionless
if ((CT == 1.0) && (PM == 0))
i_Ca_L = 1.8 * (-E_Ca_app + Y[0]) * (Y[4] * Y[5] + d_prime) * g_Ca_L
else if ((CT == 0) && (PM == 1.0))
i_Ca_L = 2.1000000000000001 * (-E_Ca_app + Y[0]) * (Y[4] * Y[5] + d_prime) * g_Ca_L
else 
i_Ca_L = (-E_Ca_app + Y[0]) * (Y[4] * Y[5] + d_prime) * g_Ca_L

E10 = 10.0 + Y[0]; // millivolt
if (abs(45.0 + Y[0]) < 2.5000000000718892e-7)
alpha_d_L_PW_0 = -4.1800000005842713e-6 / (-1.0 + exp(-1.000000000139778e-7)) - 1999999.9999424887 * (44.999999750000001 + Y[0]) * (4.1800000005842713e-6 / (-1.0 + exp(-1.000000000139778e-7)) + 4.1799999996561256e-6 / (-1.0 + exp(9.9999999991773334e-8)))
else 
alpha_d_L_PW_0 = -16.719999999999999 * (45.0 + Y[0]) / (-1.0 + exp(-18.0 - 0.40000000000000002 * Y[0]))

if (abs(10.0 + Y[0]) < 4.8080000000089163e-7)
alpha_d_L_PW_1 = -2.4039999999697637e-5 / (-1.0 + exp(-9.9999999998742257e-8)) - 1039933.4442576389 * (9.9999995191999993 + Y[0]) * (2.4040000000391526e-5 / (-1.0 + exp(1.0000000000162864e-7)) + 2.4039999999697637e-5 / (-1.0 + exp(-9.9999999998742257e-8)))
else 
alpha_d_L_PW_1 = -50.0 * (10.0 + Y[0]) / (-1.0 + exp(-2.0798668885191347 - 0.20798668885191349 * Y[0]))

alpha_d_L = alpha_d_L_PW_0 + alpha_d_L_PW_1; // per_second
if (abs(5.0 + Y[0]) < 2.5000000000025002e-7)
beta_d_L = -1.1200000000011203e-6 / (-1.0 + exp(-1.0000000000010001e-7)) + 1999999.9999979998 * (5.0000002500000003 + Y[0]) * (1.1200000000011203e-6 / (-1.0 + exp(1.0000000000010001e-7)) + 1.1200000000011203e-6 / (-1.0 + exp(-1.0000000000010001e-7)))
else 
beta_d_L = 4.4800000000000004 * (5.0 + Y[0]) / (-1.0 + exp(2.0 + 0.40000000000000002 * Y[0]))

d_L_infinity = 1 / (1.0 + exp(-0.14393939393939395 - 0.15151515151515152 * E10)); // dimensionless
tau_d_L = 1 / (alpha_d_L + beta_d_L); // second
E0_f_L = 18.0 + Y[0]; // millivolt
if (abs(18.0 + Y[0]) < 4.0000000001150227e-7)
alpha_f_L = -3.3960000000976542e-6 / (-1.0 + exp(-1.0000000000287557e-7)) + 1249999.9999640554 * (18.000000400000001 + Y[0]) * (3.3960000000976542e-6 / (-1.0 + exp(1.0000000000287557e-7)) + 3.3960000000976542e-6 / (-1.0 + exp(-1.0000000000287557e-7)))
else 
alpha_f_L = 8.4900000000000002 * (18.0 + Y[0]) / (-1.0 + exp(4.5 + 0.25 * Y[0]))

beta_f_L = 67.921999999999997 / (1.0 + exp(-0.25 * E0_f_L)); // per_second
f_L_infinity = alpha_f_L / (alpha_f_L + beta_f_L); // dimensionless
tau_f_L = 1 / (alpha_f_L + beta_f_L); // second
i_NaCa = (pow(Y[15], 3) * Ca_c * exp(gamma * Y[0] * F / (R * T)) - pow(Na_c, 3) * Y[16] * exp((-1.0 + gamma) * Y[0] * F / (R * T))) * k_NaCa / (1.0 + (pow(Y[15], 3) * Ca_c + pow(Na_c, 3) * Y[16]) * d_NaCa); // picoA
i_Ca_T = (-E_Ca_T + Y[0]) * g_Ca_T * Y[6] * Y[7]; // picoA
E0_d_T = 23.300000000000001 + Y[0]; // millivolt
alpha_d_T = 674.173 * exp(0.033333333333333333 * E0_d_T); // per_second
beta_d_T = 674.173 * exp(-0.033333333333333333 * E0_d_T); // per_second
d_T_infinity = 1 / (1.0 + exp(0.049180327868852458 - 0.16393442622950821 * E0_d_T)); // dimensionless
tau_d_T = 1 / (alpha_d_T + beta_d_T); // second
E0_f_T = 75.0 + Y[0]; // millivolt
alpha_f_T = 9.6370000000000005 * exp(-0.012004801920768308 * E0_f_T); // per_second
beta_f_T = 9.6370000000000005 * exp(0.065019505851755519 * E0_f_T); // per_second
f_T_infinity = alpha_f_T / (alpha_f_T + beta_f_T); // dimensionless
tau_f_T = 1 / (alpha_f_T + beta_f_T); // second
if ((CT == 1.0) && (PM == 0))
i_B_Ca = 2.0000000000000002e-5 * Y[0] - 2.0000000000000002e-5 * E_Ca
else if ((CT == 0) && (PM == 1.0))
i_B_Ca = 3.0000000000000001e-5 * Y[0] - 3.0000000000000001e-5 * E_Ca
else 
i_B_Ca = (-E_Ca + Y[0]) * g_B_Ca

i_Kr = (-E_K + Y[0]) * Y[13] * Y[14] * g_Kr; // picoA
i_Ks = (-E_K + Y[0]) * Y[12] * g_Ks; // picoA
alpha_p_a = 9.0 * exp(0.03941508020968823 * Y[0]); // per_second
beta_p_a = 1.3 * exp(-0.076769537847382163 * Y[0]); // per_second
p_a_infinity = 1 / (1.0 + exp(-0.68918918918918914 - 0.13513513513513511 * Y[0])); // dimensionless
tau_p_a = 1 / (alpha_p_a + beta_p_a); // second
alpha_p_i = 100.0 * exp(-0.018299935950224173 * Y[0]); // per_second
beta_p_i = 656.0 * exp(0.009420009985210585 * Y[0]); // per_second
p_i_infinity = 1 / (1.0 + exp(2.539728728905752 + 0.05358970648917756 * Y[0])); // dimensionless
tau_p_i = 1 / (alpha_p_i + beta_p_i); // second
alpha_z = 1.6599999999999999 * exp(0.014398433450440593 * Y[0]); // per_second
beta_z = 0.29999999999999999 * exp(-0.045816915605241454 * Y[0]); // per_second
tau_z = 0.059999999999999998 + 1 / (alpha_z + beta_z); // second
z_infinity = 1 / (1.0 + exp(0.065217391304347824 - 0.072463768115942032 * Y[0])); // dimensionless
i_bck = A0_bck * Scale_bck / ((1 + exp(-Y[0] * k_bck)) * Cext); // dimensionless
i_leak_comp = (-E_l + Y[0]) * g_leak * leak_comp_perc / (100 * Cext); // dimensionless
i_inj = (-i_bck - i_leak_comp + I_ext) * Scaling; // dimensionless
if ((CT == 1.0) && (PM == 0))
i_K1 = 2.0 * pow(Y[22], 3) * (-E_K + Y[0]) * g_K1 / ((1.0 + exp((-E_K - shiftK1 + Y[0]) * steepK1 * F / (R * T))) * pow((Y[22] + KmK1), 3))
else if ((CT == 0) && (PM == 1.0))
i_K1 = 2.5 * pow(Y[22], 3) * (-E_K + Y[0]) * g_K1 / ((1.0 + exp((-E_K - shiftK1 + Y[0]) * steepK1 * F / (R * T))) * pow((Y[22] + KmK1), 3))
else 
i_K1 = pow(Y[22], 3) * (-E_K + Y[0]) * g_K1 / ((1.0 + exp((-E_K - shiftK1 + Y[0]) * steepK1 * F / (R * T))) * pow((Y[22] + KmK1), 3))

if ((time >= stim_start) && (time <= stim_end) && (stim_duration >= -stim_start - stim_period * floor((-stim_start + time) / stim_period) + time))
i_Stim = stim_amplitude
else 
i_Stim = 0

i_CaP = Y[16] * i_CaP_max / (Y[16] + k_CaP); // picoA
Ca_i_orig_deriv = -0.044999999999999998 * dOCdt - 0.080000000000000002 * dOTCdt - 0.16 * dOTMgCdt + 0.5 * (-i_up - i_Ca_L - i_Ca_T - i_B_Ca - i_CaP + 2.0 * i_NaCa + i_rel) / (Vol_Ca * F); // millimolar / second
dY[16] = 0.001 * Ca_i_orig_deriv; // millimolar / millisecond
E_Na = R * T * log(Na_c / Y[15]) / F; // millivolt
if ((CT == 1.0) && (PM == 0))
i_B_Na = 2.0000000000000002e-5 * Y[0] - 2.0000000000000002e-5 * E_Na
else if ((CT == 0) && (PM == 1.0))
i_B_Na = 3.0000000000000001e-5 * Y[0] - 3.0000000000000001e-5 * E_Na
else 
i_B_Na = (-E_Na + Y[0]) * g_B_Na

alpha_h = 44.899999999999999 * exp(-12.010771992818672 - 0.17953321364452424 * Y[0]); // per_second
beta_h = 1491.0 / (1.0 + 323.30000000000001 * exp(-7.333333333333333 - 0.077519379844961239 * Y[0])); // per_second
h_infinity = alpha_h / (alpha_h + beta_h); // dimensionless
tau_h1 = 0.00014999999999999999 + 0.029999999999999999 / (1.0 + exp(6.666666666666667 + 0.16666666666666666 * Y[0])); // second
tau_h2 = 0.00044999999999999999 + 0.12 / (1.0 + exp(30.0 + 0.5 * Y[0])); // second
E0_m = 44.399999999999999 + Y[0]; // millivolt
if (abs(44.399999999999999 + Y[0]) < 1.2672999999963075e-6)
alpha_m = -0.00058295799999830145 / (-1.0 + exp(-9.9999999999708629e-8)) - 394539.57232025318 * (44.399998732699999 + Y[0]) * (0.00058295799999830145 / (-1.0 + exp(9.9999999999708629e-8)) + 0.00058295799999830145 / (-1.0 + exp(-9.9999999999708629e-8)))
else 
alpha_m = -460.0 * (44.399999999999999 + Y[0]) / (-1.0 + exp(-3.5035114021936398 - 0.078907914463820727 * Y[0]))

beta_m = 18400.0 * exp(-0.078907914463820727 * E0_m); // per_second
if (abs(Y[0]) < 2.6539450910485349e-6)
i_Na = 188398.77346612973 * (2.6539450910485349e-6 + Y[0]) * (1.8911451999999998e-6 * pow(Y[1], 3) * (-1.0 + exp(9.9999999999999995e-8 - log(140.0 / Y[15]))) * (0.36499999999999999 * Y[3] + 0.63500000000000001 * Y[2]) / (-1.0 + exp(9.9999999999999995e-8)) + 1.8911451999999998e-6 * pow(Y[1], 3) * (-1.0 + exp(-9.9999999999999995e-8 - log(140.0 / Y[15]))) * (0.36499999999999999 * Y[3] + 0.63500000000000001 * Y[2]) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.8911451999999998e-6 * pow(Y[1], 3) * (-1.0 + exp(-9.9999999999999995e-8 - log(140.0 / Y[15]))) * (0.36499999999999999 * Y[3] + 0.63500000000000001 * Y[2]) / (-1.0 + exp(-9.9999999999999995e-8))
else 
i_Na = 0.71257887225271721 * pow(Y[1], 3) * (-1.0 + exp(0.037679754693225945 * Y[0] - log(140.0 / Y[15]))) * (0.36499999999999999 * Y[3] + 0.63500000000000001 * Y[2]) * Y[0] / (-1.0 + exp(0.037679754693225945 * Y[0]))

i_p = 1.6000000000000001 * pow(Y[15], 1.5) * Y[22] * i_NaK_max / ((1.5 + exp(-1.5 - 0.025000000000000001 * Y[0])) * (pow(Y[15], 1.5) + pow(k_NaK_Na, 1.5)) * (Y[22] + k_NaK_K)); // picoA
K_c_orig_deriv = (-2.0 * i_p + i_sus + i_to + i_Kr + i_Ks + i_K1) / (Vol_c * F); // millimolar / second
dY[22] = 0.001 * K_c_orig_deriv; // millimolar / millisecond
K_i_orig_deriv = (-i_sus - i_to - i_Kr - i_Ks - i_K1 + 2.0 * i_p) / (Vol_i * F); // millimolar / second
dY[17] = 0.001 * K_i_orig_deriv; // millimolar / millisecond
Na_i_orig_deriv = (-i_B_Na - i_Na - 3.0 * i_NaCa - 3.0 * i_p) / (Vol_i * F); // millimolar / second
dY[15] = 0.001 * Na_i_orig_deriv; // millimolar / millisecond
V_orig_deriv = -(i_sus + i_to + i_Ca_L + i_NaCa + i_Ca_T + i_B_Ca + i_B_Na + i_Kr + i_Ks + i_inj + i_K1 + i_Stim + i_CaP + i_Na + i_p) / Cm; // millivolt / second
dY[0] = 0.001 * V_orig_deriv; // millivolt / millisecond
//------------------------------------------------------------------------------
// Integration & Output
//------------------------------------------------------------------------------
// Rush-Larsen method

// get tau/inf or alpha/beta

float64 alphaOrTau_1 = 0.001 * alpha_m;
float64 betaOrInf_1 = 0.001 * beta_m;
float64 alphaOrTau_2 = 1000.0 * tau_h1;
float64 betaOrInf_2 = h_infinity;
float64 alphaOrTau_3 = 1000.0 * tau_h2;
float64 betaOrInf_3 = h_infinity;
float64 alphaOrTau_4 = 1000.0 * tau_d_L;
float64 betaOrInf_4 = d_L_infinity;
float64 alphaOrTau_5 = 1000.0 * tau_f_L;
float64 betaOrInf_5 = f_L_infinity;
float64 alphaOrTau_6 = 1000.0 * tau_d_T;
float64 betaOrInf_6 = d_T_infinity;
float64 alphaOrTau_7 = 1000.0 * tau_f_T;
float64 betaOrInf_7 = f_T_infinity;
float64 alphaOrTau_8 = 1000.0 * tau_r;
float64 betaOrInf_8 = r_infinity;
float64 alphaOrTau_9 = 1000.0 * tau_s1;
float64 betaOrInf_9 = s1_infinity;
float64 alphaOrTau_10 = 1000.0 * tau_s2;
float64 betaOrInf_10 = s2_infinity;
float64 alphaOrTau_11 = 1000.0 * tau_s3;
float64 betaOrInf_11 = s3_infinity;
float64 alphaOrTau_12 = 1000.0 * tau_z;
float64 betaOrInf_12 = z_infinity;
float64 alphaOrTau_13 = 1000.0 * tau_p_a;
float64 betaOrInf_13 = p_a_infinity;
float64 alphaOrTau_14 = 1000.0 * tau_p_i;
float64 betaOrInf_14 = p_i_infinity;

// gating variables: Exponential integration

float64 tau_inv_1 = alphaOrTau_1 + betaOrInf_1;
float64 y_inf_1 = alphaOrTau_1 / tau_inv_1;
Ynew[1] = y_inf_1 + (Y[1] - y_inf_1)*exp(-dt*tau_inv_1);
Ynew[2] = betaOrInf_2 + (Y[2] - betaOrInf_2)*exp(-dt/alphaOrTau_2);
Ynew[3] = betaOrInf_3 + (Y[3] - betaOrInf_3)*exp(-dt/alphaOrTau_3);
Ynew[4] = betaOrInf_4 + (Y[4] - betaOrInf_4)*exp(-dt/alphaOrTau_4);
Ynew[5] = betaOrInf_5 + (Y[5] - betaOrInf_5)*exp(-dt/alphaOrTau_5);
Ynew[6] = betaOrInf_6 + (Y[6] - betaOrInf_6)*exp(-dt/alphaOrTau_6);
Ynew[7] = betaOrInf_7 + (Y[7] - betaOrInf_7)*exp(-dt/alphaOrTau_7);
Ynew[8] = betaOrInf_8 + (Y[8] - betaOrInf_8)*exp(-dt/alphaOrTau_8);
Ynew[9] = betaOrInf_9 + (Y[9] - betaOrInf_9)*exp(-dt/alphaOrTau_9);
Ynew[10] = betaOrInf_10 + (Y[10] - betaOrInf_10)*exp(-dt/alphaOrTau_10);
Ynew[11] = betaOrInf_11 + (Y[11] - betaOrInf_11)*exp(-dt/alphaOrTau_11);
Ynew[12] = betaOrInf_12 + (Y[12] - betaOrInf_12)*exp(-dt/alphaOrTau_12);
Ynew[13] = betaOrInf_13 + (Y[13] - betaOrInf_13)*exp(-dt/alphaOrTau_13);
Ynew[14] = betaOrInf_14 + (Y[14] - betaOrInf_14)*exp(-dt/alphaOrTau_14);

// Remainder: Forward Euler

Ynew[0] = Y[0] + dt * dY[0];
Ynew[15] = Y[15] + dt * dY[15];
Ynew[16] = Y[16] + dt * dY[16];
Ynew[17] = Y[17] + dt * dY[17];
Ynew[18] = Y[18] + dt * dY[18];
Ynew[19] = Y[19] + dt * dY[19];
Ynew[20] = Y[20] + dt * dY[20];
Ynew[21] = Y[21] + dt * dY[21];
Ynew[22] = Y[22] + dt * dY[22];
Ynew[23] = Y[23] + dt * dY[23];
Ynew[24] = Y[24] + dt * dY[24];
Ynew[25] = Y[25] + dt * dY[25];
Ynew[26] = Y[26] + dt * dY[26];
Ynew[27] = Y[27] + dt * dY[27];
Ynew[28] = Y[28] + dt * dY[28];
Ynew[29] = Y[29] + dt;

Vmem = Ynew[0];
time = Ynew[29];